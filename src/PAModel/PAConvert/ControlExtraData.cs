using Microsoft.AppMagic.Authoring.Persistence;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace PAModel.PAConvert
{
    /// <summary>
    /// This whole file can be cleaned up with server changes
    /// </summary>
    class ControlExtraData
    {
        public class RuleExtraData
        {
            public string Property { get; set; }
            public string NameMap { get; set; }
            public string Category { get; set; }

            public RuleExtraData(ControlInfoJson.RuleEntry rule)
            {
                Property = rule.Property;
                NameMap = rule.NameMap;
                Category = rule.Category;
            }
        }

        public class ControlPropertyStateExtraData
        {
            public string InvariantPropertyName { get; set; }
            // Actual EditorState (string should match rule tho?)
            public bool AutoRuleBindingEnabled { get; set; } = false;
            public string AutoRuleBindingString { get; set; } = "";
            public string NameMapSourceSchema { get; set; } = "?";
            public bool IsLockable { get; set; } = false;
            public string AFDDataSourceName { get; set; } = "";

            public ControlPropertyStateExtraData(JsonElement element)
            {
                if (element.TryGetProperty("InvariantPropertyName", out var inner))
                    InvariantPropertyName = inner.GetString();
                if (element.TryGetProperty("AutoRuleBindingEnabled", out inner))
                    AutoRuleBindingEnabled = inner.GetBoolean();
                if (element.TryGetProperty("AutoRuleBindingString", out inner))
                    AutoRuleBindingString = inner.GetString();
                if (element.TryGetProperty("NameMapSourceSchema", out inner))
                    NameMapSourceSchema = inner.GetString();
                if (element.TryGetProperty("IsLockable", out inner))
                    IsLockable = inner.GetBoolean();
                if (element.TryGetProperty("AFDDataSourceName", out inner))
                    AFDDataSourceName = inner.GetString();
            }
        }

        public string ControlUniqueId { get; set; }
        public ControlInfoJson.Template Template { get; set; }

        // Actual EditorState
        public bool IsLocked { get; set; } = false;

        // Should be skippable except for ones with NameMap, maybe even those?
        public RuleExtraData[] Rules { get; set; }

        // Should be skippable except for ones with NameMap, maybe even those?
        public ControlPropertyStateExtraData[] ControlPropertyState { get; set; }

        //Recreatable if missing
        public string LayoutName { get; set; } = "";
        public string MetaDataIDKey { get; set; } = "";
        public bool PersistMetaDataIDKey { get; set; } = false;
        public bool IsFromScreenLayout { get; set; } = false;
        public bool IsDataControl { get; set; } = false;
        public bool IsGroupControl { get; set; } = false;
        public bool IsAutoGenerated { get; set; } = false;
        public string StyleName { get; set; } = "";

        // Skippable entirely with server update
        public double Index { get; set; } = 0;
        public int PublishOrderIndex { get; set; } = 0;


        public ControlExtraData(ControlInfoJson.Item item)
        {
            ControlUniqueId = item.ControlUniqueId;
            Template = item.Template;

            if (item.ExtensionData.TryGetValue("LayoutName", out var element))
                LayoutName = element.GetString();

            if (item.ExtensionData.TryGetValue("IsLocked", out element))
                IsLocked = element.GetBoolean();

            if (item.ExtensionData.TryGetValue("MetaDataIDKey", out element))
                MetaDataIDKey = element.GetString();

            if (item.ExtensionData.TryGetValue("PersistMetaDataIDKey", out element))
                PersistMetaDataIDKey = element.GetBoolean();

            if (item.ExtensionData.TryGetValue("IsFromScreenLayout", out element))
                IsFromScreenLayout = element.GetBoolean();

            if (item.ExtensionData.TryGetValue("IsDataControl", out element))
                IsDataControl = element.GetBoolean();

            if (item.ExtensionData.TryGetValue("IsGroupControl", out element))
                IsGroupControl = element.GetBoolean();

            if (item.ExtensionData.TryGetValue("IsAutoGenerated", out element))
                IsAutoGenerated = element.GetBoolean();

            if (item.ExtensionData.TryGetValue("StyleName", out element))
                StyleName = element.GetString();

            if (item.ExtensionData.TryGetValue("Index", out element))
                Index = element.GetDouble();

            if (item.ExtensionData.TryGetValue("PublishOrderIndex", out element))
                PublishOrderIndex = element.GetInt32();

            if (item.ExtensionData.TryGetValue("ControlPropertyState", out element))
            {
                var controlPropertyState = new List<ControlPropertyStateExtraData>();
                foreach (var state in element.EnumerateArray())
                {
                    if (state.ValueKind == System.Text.Json.JsonValueKind.String)
                        continue;
                    else
                    {
                        controlPropertyState.Add(new ControlPropertyStateExtraData(state));
                    }
                }
                if (controlPropertyState.Any())
                    ControlPropertyState = controlPropertyState.ToArray();
            }

            var ruleExtraData = new List<RuleExtraData>();
            foreach (var rule in item.Rules)
            {
                ruleExtraData.Add(new RuleExtraData(rule));
            }

            Rules = ruleExtraData.ToArray();
        }
    }
}
